# -*- coding: utf-8 -*-
"""Optical Character Recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P3RWIFLhNhM7fpBzBAU9putjGO2iHuXw

# Library
"""

pip install virtualenv # Harus diinstal

pip install --upgrade google-cloud-firestore # Harus diinstal

pip install opencv-contrib-python

pip install pytesseract

!sudo apt install tesseract-ocr

!sudo apt install tesseract-ocr-ind

import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore

import pytesseract
from pytesseract import Output

try:
 from PIL import Image
except ImportError:
 import Image

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import cv2
import urllib

import numpy as np
import pandas as pd
import re
import requests

"""# Connect to Firestore and Get Data"""

import firebase_admin
from firebase_admin import credentials

if not firebase_admin._apps:
    cred = credentials.Certificate('/content/q-hope-3b34d8a7bf60.json') 
    default_app = firebase_admin.initialize_app(cred)
    db = firestore.client()

doc_ref = db.collection(u'users').document(u'IkaUeziMMuTSeATnRVXepnvyQWP2')

doc = doc_ref.get()
if doc.exists:
    docs = doc.to_dict()
    url = docs['imageUrl']
else:
    print(u'No such document!')

"""# Open Image"""

def url_to_image(url):
	# download the image, convert it to a NumPy array, and then read
	# it into OpenCV format
	resp = urllib.request.urlopen(url)
	image = np.asarray(bytearray(resp.read()), dtype="uint8")
	image = cv2.imdecode(image, cv2.COLOR_RGB2BGR)
	# return the image
	return cv2.cvtColor(image , cv2.COLOR_BGR2RGB)

img = url_to_image(url)

"""# Image Preprocessing"""

def resize(image):

  size = 1700, 2000
  im_resized = cv2.resize(image, (size))
  #im_resized.save("my_image_resized.png", "PNG")
  return im_resized

# get grayscale image
def get_grayscale(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
 
#thresholding
def thresholding(image):
    # threshold the image, setting all foreground pixels to
    # 255 and all background pixels to 0
    th, threshed = cv2.threshold(image, 127, 255, cv2.THRESH_TRUNC)
    return threshed

#Crop Image
def crop_image(image):

  canny = cv2.Canny(image, 100, 250)

  ## find the non-zero min-max coords of canny
  pts = np.argwhere(canny>0)
  y1,x1 = pts.min(axis=0)
  y2,x2 = pts.max(axis=0)

  ## crop the region
  cropped = image[y1:y2, x1:x2]
  return cropped

def preprocessing_image(img):
    gray = get_grayscale(img)

    threshed = thresholding(gray)

    image = threshed.copy()

    return image

"""# Extract Text"""

def extract_text(extract):
  keys = ['no_ktp', 'name', 'place of birth', 'birthdate', 'gender']

  df = pd.DataFrame(columns = keys)

  dict_ktp = {key: None for key in keys}
  for word in extract.split("\n"):

    if "”—" in word:
      word = word.replace("”—", ":")
    
    #normalize NIK
    if re.search("NIK", word):
      
      if "D" in word:
        word = word.replace("D", "0")
      if "?" in word:
        word = word.replace("?", "7")
      if "b" in word:
        word = word.replace("b", "6")   
      
      try:
        array = re.findall(r'[0-9]+', word)
        for arr in array:
          if len(arr) == 16:
            dict_ktp['no_ktp'] = str(arr)

      except:
        dict_ktp['NIK'] = None
      
    if re.search("Nama", word):

      word = word.replace("Nama", "")
      word = word.upper()
      
      try:
        array = re.findall(r'[A-Z]+[A-Z]+', word)
        dict_ktp['name'] = ' '.join([str(elem) for elem in array])

      except:
        dict_ktp['name'] = None

    if re.search(r'[A-Z]+[A-Z]+[,.]', word):

      try:
        array = re.findall(r'[A-Z]+[A-Z]+', word)
        arr   = re.findall(r'\d{2}-\d{2}-\d{4}', word)
        dict_ktp['place of birth'] = ' '.join([str(elem) for elem in array])
        dict_ktp['birthdate'] = ' '.join([str(elem) for elem in arr])

      except:
        dict_ktp['place of birth'] = None
        dict_ktp['birthdate'] = None

    try:
      if re.search("^PEREM|.*PUAN", word):
        dict_ktp['gender'] = 'Female'
      elif re.search("LAKI", word):
        dict_ktp['gender'] = 'Male'

    except:
      dict_ktp['gender'] = None

  return df.append(dict_ktp, ignore_index=True)

"""# Firebase

---

Add Data
"""

# Use a service account
def add_data(data):
  
    # Add a new data
    user_data = db.collection(u'user_data').document(u'MHaxZVBP0TrjV8bDfHcu').set(data[0], merge=True)

image = preprocessing_image(img)
teks = extract_text(pytesseract.image_to_string(image, lang="ind"))
data = teks.to_dict('records')
add_data(data)